'''

    Програмісти вводять тексти своїх програм за допомогою клавіатури. 
Існують спеціальні клавіатурні комбінації, за допомогою
яких робота над текстом йде набагато швидше, ніж за допомогою миші. 
Ці комбінації називаються гарячими клавішами. 

    Щоб їх використати, потрібно натиснути на символьну клавішу один раз, 
утримуючи клавішу-модифікатор (Ctrl або Shift).

    У таблиці наведені найбільш часто використовувані клавіші.
?———————————————————————————————————————————————————————————————————————————————————————————————————
?| Tab                             |   Замінює 4 пробіли.                                          |
?| Ctrl + С                        |   Копіювання в буфер обміну.                                  |
?| Ctrl + V                        |   Вставка із буфера обміну.                                   |
?| Ctrl + Z                        |   Скасування останньої дії(не завжди можливе).                |
?| Shift + переміщення курсора     |   Виділення тексту.                                           |
?| Ctrl + X                        |   Видалення виділеного тексту з копіюванням у буфер обміну    |
?| Ctrl + <←> або <→>              |   Переміщення на одне слово у тексті.                         |
?| Ctrl + <Home>                   |   Переміщення до початку тексту.                              |
?| Ctrl + <End>                    |   Переміщення до кінця тексту.                                |
?| Ctrl + <+> або <->              |   Збільшення або зменшення масштабу екрана.                   |
?———————————————————————————————————————————————————————————————————————————————————————————————————
    *у MacOS замість Ctrl використовується клавіша Command.

    Програмісти вводять тексти своїх програм за допомогою клавіатури. Існують спеціальні клавіатурні комбінації, за допомогою
яких робота над текстом йде набагато швидше, ніж за допомогою миші. Ці комбінації називаються гарячими клавішами. Щоб
їх використати, потрібно натиснути на символьну клавішу один раз, утримуючи клавішу-модифікатор(Ctrl або Shift).
У таблиці наведені найбільш часто використовувані клавіші.


Перевірка умови

?  Рівне  |  Не рівне  |  Менше  |  Більше  |  Менше або рівне  |  Більше або рівне  |
?    ==   |    !=      |    <    |    >     |        <=         |        >=          |
    
!    Слідування – 
команди виконуються послідовно одна за іншою

!    Розгалуження – 
алгоритм, що містить хоча б одну умову в
результаті перевірки якої може виконуватись розділення на
декілька паралельних гілок. Кожна з гілок може містити
також розділення, послідовні дії або цикли.

!    Цикл – 
інструкції що виконують одну і ту ж послідовність
дій поки діє задана умова.

    Рядки if в Python є операторами, які перевіряють, чи є
значення виразу (в даному випадку змінна x) рівним True.

!    print() – 
це вбудована в Python функція для виведення
інформації. Вбудовані функції Python – це іменовані фрагменти
коду, які виконують певні операції.

    Кожен рядок print() відокремлений пробілами під
відповідною перевіркою.

    Гвідо ван Росум при розробці Python вирішив, що виділення
пробілами буде досить, щоб задати структуру програми і
уникнути уведення дужок. Python відрізняється від інших мов
тим, що пробіли в ньому використовуються для того, щоб задати
структуру програми

    Як правило, використовують чотири пробіли для того, щоб
виділити кожен підрозділ, хоча можна використовувати будь-яку
кількість пробілів, Python чекає, що всередині одного розділу
буде застосовуватися однакова кількість пробілів.

    Рекомендований стиль – PEP-8 (http://bit.ly/pep-8) –
використовувати чотири пробіли. Не рекомендується
застосовувати табуляцію або поєднання табуляцій і пробілів – це
заважає підраховувати відступи.

    З огляду на це, в конструкції if код, який виконується при
істинності умови, повинен обов’язково мати відступ вправо.

    Решта коду (основна програма) повинен мати той же відступ, що
і слово if.

    Зустрічається і більш складна форма розгалуження: if-else.
Якщо умова при інструкції if є хибною, то виконується блок коду
при інструкції else:
                    if ЛОГІЧНА_УМОВА:
                        ПОСЛІДОВНІСТЬ_ВИРАЗІВ_1
                    else:
                        ПОСЛІДОВНІСТЬ_ВИРАЗІВ_2
                        
    Працює ця конструкція наступним чином. Спочатку
перевіряється перша умова і, якщо вона істинна, то виконується
перша послідовність виразів. Якщо умова не виконується потік
виконання переходить до рядка, який йде після else

#!      Альтернативні гілки програми
    Логіка програми що виконується може бути складнішою, ніж
вибір однієї з двох гілок.

    Умовний оператор if має розширений формат, що дозволяє
перевіряти кілька незалежних одна від одної умов і виконувати
один з блоків, поставлених у відповідність з цими умовами. У
загальному вигляді оператор виглядає так:
                    if ЛОГІЧНА_УМОВА_1:
                        ПОСЛІДОВНІСТЬ_ВИРАЗІВ_1
                    elif ЛОГІЧНА_УМОВА_2:
                        ПОСЛІДОВНІСТЬ_ВИРАЗІВ_2
                    elif ЛОГІЧНА_УМОВА_3:
                        ПОСЛІДОВНІСТЬ_ВИРАЗІВ_3
                    ...
                    else:
                        ПОСЛІДОВНІСТЬ_ВИРАЗІВ_N
                        
    Працює ця конструкція наступним чином. Спочатку
перевіряється перша умова і, якщо вона істинна, то виконується
перша послідовність виразів. Після цього потік виконання
переходить до рядку, який йде після умовного оператора (тобто
за послідовністю виразів N). Якщо перша умова рівна False, то
перевіряється друга умова (наступна після elif), і в разі його
істинності виконується послідовність 2, а потім знову потік
виконання переходить до рядка, наступного за оператором умови.
Аналогічно перевіряються всі інші умови. До гілки програми else
потік виконання доходить тільки в тому випадку, якщо не
виконується жодна з умов.

    Ключове слово elif походить від англ. "Else if" – "інакше
якщо". Тобто умова, яка слідує після нього перевіряється тільки
тоді, коли всі попередні умови хибні.
if not True:
    print("1")
elif not (1+1==3):
    print("2")
else:
    print("3")
    
Результатом запуску даного коду буде:
3

'''